Explanation
=============================================

Variables
---------------------------------------------

In programming, a variable is a named storage location that holds a value. It's like a labeled box where you can put things (data) for later use. In Python, variables play a crucial role in working with data and manipulating it. Here are some key points to understand about variables in Python:

1. name and Name are treated as different variables.

2. =. For example: age = 25 assigns the value 25 to the variable age.

3. (int), floating-point numbers (float), strings (str), and more complex types like lists (list), dictionaries (dict), tuples (tuple), and sets (set).

4. Dynamic Typing: Unlike some other programming languages, Python is dynamically typed. This means that you don't need to declare the data type of a variable explicitly; Python figures it out based on the assigned value.

5. age = 26 changes the value of the age variable.

6. print() function. For example: print(age) will output the value stored in the age variable.

7. Variable Scope: Variables have a scope, which defines where the variable is accessible and where it is not. Variables defined inside a function have a local scope and are only accessible within that function. Variables defined outside any function have a global scope and can be accessed from anywhere in the program.

8. total_students instead of ts makes the code more readable.

.. code-block:: python

    name = "Alice"
    age = 30
    height = 5.7
    is_student = True

    print("Name:", name)
    print("Age:", age)
    print("Height:", height)
    print("Is Student:", is_student)

In this example, we declare variables to store a name, an age, a height, and a student status. Then, we print out their values using the print() function.

|

Control Statements
---------------------------------------------

Control statements are essential for controlling the flow of a program. They allow you to make decisions, repeat actions, and create structured logic in your code. In Python, control statements come in the form of conditional statements (if, elif, else), loops (for and while), and branching mechanisms.

Here's an explanation of control statements with examples:

1. if statement, which checks a condition and executes a block of code if the condition is true. The elif and else branches allow for more complex decision-making.

.. code-block:: python

    temperature = 25

    if temperature > 30:
        print("It's hot outside.")
    elif temperature > 20:
        print("The weather is pleasant.")
    else:
        print("It's a bit chilly.")

2. for loop iterates through a sequence (like a list) and performs the specified actions for each element. The while loop continues as long as a specified condition is true.

.. code-block:: python

    fruits = ["apple", "banana", "orange"]

    for fruit in fruits:
        print(fruit)

    count = 0
    while count < 5:
        print("Count:", count)
        count += 1

3. Break and Continue:
The break statement is used to exit a loop prematurely, even if the loop condition is still true. The continue statement is used to skip the remaining code inside the current iteration and move to the next one.

.. code-block:: python

    for number in range(10):
    if number == 5:
        break
    print(number)

    for num in range(10):
        if num % 2 == 0:
            continue
        print(num)

4. Nested Loops:
You can have loops inside other loops, creating nested loops. This is useful for handling more complex patterns or situations that require multiple levels of iteration.

.. code-block:: python

    for i in range(3):
    for j in range(2):
        print(i, j)

Control statements are fundamental to programming because they allow you to add logic and decision-making to your code, enabling it to respond dynamically to different situations.

|

Functions and Classes
---------------------------------------------

Functions and classes are fundamental concepts in programming that help you organize and structure your code for better readability, reusability, and modularity.

Here's an explanation of functions and classes with examples:

1. Functions:
A function is a block of code that performs a specific task. It takes input, processes it, and produces an output. Functions help avoid code repetition and make your code more manageable.

.. code-block:: python

    def greet(name):
    return f"Hello, {name}!"

    message = greet("Alice")
    print(message)

2. Functions with Default Parameters:
Functions can have default parameter values, which are used when an argument is not provided during the function call.

.. code-block:: python

    def add_numbers(a, b=0):
    return a + b

    result1 = add_numbers(5, 3)
    result2 = add_numbers(7)
    print("Result 1:", result1)
    print("Result 2:", result2)

3. Classes:
A class is a blueprint for creating objects that have attributes (variables) and methods (functions). It allows you to model real-world entities in your code.

.. code-block:: python
    
    class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def calculate_area(self):
        return self.width * self.height

    rect1 = Rectangle(10, 5)
    rect2 = Rectangle(8, 6)

    area1 = rect1.calculate_area()
    area2 = rect2.calculate_area()
    print("Area 1:", area1)
    print("Area 2:", area2)


In this example, we define a Rectangle class with an __init__ constructor method to initialize width and height attributes. The calculate_area() method calculates and returns the area of the rectangle. We create objects of the class and call the methods to calculate and print their areas.

Functions and classes are building blocks that allow you to create more organized, reusable, and maintainable code. They are essential for implementing complex logic and creating custom data types in your programs.