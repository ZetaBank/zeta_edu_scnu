액션 서버 및 클라이언트 작성하기 (C++)
=========================================

**목표:** C++로 액션 서버 및 클라이언트를 구현합니다.

배경 정보
----------

액션은 ROS에서 비동기 통신의 한 형태입니다.
*액션 클라이언트* 는 목표 요청을 *액션 서버* 에 보냅니다.
*액션 서버* 는 목표 피드백과 결과를 *액션 클라이언트* 에 보냅니다.

전제 조건
-------------

이전 튜토리얼인 :doc:`./2.create_action` 에서 정의한 ``action_tutorials_interfaces`` 패키지와 ``Fibonacci.action`` 인터페이스가 필요합니다.

작업
---------

1 액션 서버를 위한 ``action_tutorials_cpp`` 패키지 생성
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:doc:`패키지 생성하기 </courses/3.tutorial_client_libraries/3.create_package>` 튜토리얼에서 본 것처럼 C++ 및 지원 코드를 보관하기 위한 새 패키지를 생성해야 합니다.

1.1 ``action_tutorials_cpp`` 패키지 생성
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:doc:`이전 튜토리얼 <./2.create_action>` 에서 생성한 액션 워크스페이스로 이동하십시오 (워크스페이스를 소스로 설정하지 않으면 잊지 마십시오) 그리고 C++ 액션 서버를 위한 새 패키지를 생성하십시오:


.. tabs::

  .. group-tab:: Linux

    .. code-block:: bash

      cd ~/ros2_ws/src
      ros2 pkg create --dependencies action_tutorials_interfaces rclcpp rclcpp_action rclcpp_components -- action_tutorials_cpp


1.2 가시성 제어 추가
~~~~~~~~~~~~~~~~~~~~~~

Windows에서 패키지를 컴파일하고 실행하기 위해 "가시성 제어(visibility control)"를 추가해야 합니다.
자세한 내용은 `Windows 팁 및 트릭 문서 <https://docs.ros.org/en/humble/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.html#windows-symbol-visibility>`__ 를 참조하십시오.

``action_tutorials_cpp/include/action_tutorials_cpp/visibility_control.h`` 파일을 열고 다음 코드를 추가하십시오.

.. code-block:: c++

  #ifndef ACTION_TUTORIALS_CPP__VISIBILITY_CONTROL_H_
  #define ACTION_TUTORIALS_CPP__VISIBILITY_CONTROL_H_

  #ifdef __cplusplus
  extern "C"
  {
  #endif

  // This logic was borrowed (then namespaced) from the examples on the gcc wiki:
  //     https://gcc.gnu.org/wiki/Visibility

  #if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
      #define ACTION_TUTORIALS_CPP_EXPORT __attribute__ ((dllexport))
      #define ACTION_TUTORIALS_CPP_IMPORT __attribute__ ((dllimport))
    #else
      #define ACTION_TUTORIALS_CPP_EXPORT __declspec(dllexport)
      #define ACTION_TUTORIALS_CPP_IMPORT __declspec(dllimport)
    #endif
    #ifdef ACTION_TUTORIALS_CPP_BUILDING_DLL
      #define ACTION_TUTORIALS_CPP_PUBLIC ACTION_TUTORIALS_CPP_EXPORT
    #else
      #define ACTION_TUTORIALS_CPP_PUBLIC ACTION_TUTORIALS_CPP_IMPORT
    #endif
    #define ACTION_TUTORIALS_CPP_PUBLIC_TYPE ACTION_TUTORIALS_CPP_PUBLIC
    #define ACTION_TUTORIALS_CPP_LOCAL
  #else
    #define ACTION_TUTORIALS_CPP_EXPORT __attribute__ ((visibility("default")))
    #define ACTION_TUTORIALS_CPP_IMPORT
    #if __GNUC__ >= 4
      #define ACTION_TUTORIALS_CPP_PUBLIC __attribute__ ((visibility("default")))
      #define ACTION_TUTORIALS_CPP_LOCAL  __attribute__ ((visibility("hidden")))
    #else
      #define ACTION_TUTORIALS_CPP_PUBLIC
      #define ACTION_TUTORIALS_CPP_LOCAL
    #endif
    #define ACTION_TUTORIALS_CPP_PUBLIC_TYPE
  #endif

  #ifdef __cplusplus
  }
  #endif

  #endif  // ACTION_TUTORIALS_CPP__VISIBILITY_CONTROL_H_

2 액션 서버 작성
^^^^^^^^^^^^^^^^^^

액션 서버를 작성하는 것에 중점을 둡시다. 이 액션 서버는 :doc:`./2.create_action` 튜토리얼에서 생성한 액션을 사용하여 피보나치 수열을 계산합니다.

2.1 액션 서버 코드 작성
~~~~~~~~~~~~~~~~~~~~~~~~~~

``action_tutorials_cpp/src/fibonacci_action_server.cpp`` 파일을 열고 다음 코드를 추가하십시오.

.. literalinclude:: scripts/server.cpp
    :language: c++

첫 몇 줄은 컴파일에 필요한 모든 헤더를 포함합니다.

다음으로 ``rclcpp::Node`` 의 파생 클래스를 만듭니다.

.. literalinclude:: scripts/server.cpp
    :language: c++
    :lines: 14


``FibonacciActionServer`` 클래스의 생성자는 노드 이름을 ``fibonacci_action_server`` 로 초기화합니다.

.. literalinclude:: scripts/server.cpp
    :language: c++
    :lines: 21-22

생성자는 또한 새 액션 서버를 인스턴스화합니다.

.. literalinclude:: scripts/server.cpp
    :language: c++
    :lines: 26-31

액션 서버에는 다음 6 가지가 필요합니다.

1. 템플릿화된 액션 타입 이름: ``Fibonacci``.
2. 액션을 추가할 ROS 2 노드: ``this``.
3. 액션 이름: ``'fibonacci'``.
4. 목표 처리를 담당할 콜백 함수: ``handle_goal``
5. 취소 처리를 담당할 콜백 함수: ``handle_cancel``.
6. 목표 수락 처리를 담당할 콜백 함수: ``handle_accept``.

파일에서 각각의 콜백 구현이 다음에 나옵니다.
모든 콜백은 빠르게 반환해야 하므로 주의해야 합니다.

먼저 새로운 목표를 처리하는 콜백부터 시작합니다.

.. literalinclude:: scripts/server.cpp
    :language: c++
    :lines: 37-44

이 구현은 모든 목표를 수락합니다.

다음은 취소 처리를 다루는 콜백입니다.

.. literalinclude:: scripts/server.cpp
    :language: c++
    :lines: 46-52

이 구현은 목표가 취소되었다고 클라이언트에게 알립니다.

마지막 콜백은 새로운 목표를 수락하고 처리를 시작합니다.

.. literalinclude:: scripts/server.cpp
    :language: c++
    :lines: 54-59

실행이 긴 작업이므로 실제 작업을 수행하기 위해 새 스레드를 생성하고 빠르게 ``handle_accepted`` 에서 반환합니다.

나머지 처리 및 업데이트는 새 스레드의 ``execute`` 메소드에서 수행됩니다.

.. literalinclude:: scripts/server.cpp
    :language: c++
    :lines: 61-95


이 작업 스레드는 피보나치 수열의 한 시퀀스 번호를 1초마다 처리하고 각 단계마다 피드백 업데이트를 게시합니다.
처리를 완료하면 ``goal_handle`` 를 성공으로 표시하고 종료합니다.

이제 완전한 기능을 갖춘 액션 서버가 있습니다. 이제 빌드하고 실행합시다.

2.2 액션 서버 컴파일
~~~~~~~~~~~~~~~~~~~~~~

이전 섹션에서 액션 서버 코드를 준비했습니다.
이 코드를 컴파일하고 실행하려면 몇 가지 추가 작업을 수행해야 합니다.

먼저 CMakeLists.txt를 설정하여 액션 서버가 컴파일되도록 해야 합니다.
``action_tutorials_cpp/CMakeLists.txt`` 파일을 열고 다음을 ``find_package`` 호출 바로 다음에 추가하십시오.

.. code-block:: cmake

  add_library(action_server SHARED
    src/fibonacci_action_server.cpp)
  target_include_directories(action_server PRIVATE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>)
  target_compile_definitions(action_server
    PRIVATE "ACTION_TUTORIALS_CPP_BUILDING_DLL")
  ament_target_dependencies(action_server
    "action_tutorials_interfaces"
    "rclcpp"
    "rclcpp_action"
    "rclcpp_components")
  rclcpp_components_register_node(action_server PLUGIN "action_tutorials_cpp::FibonacciActionServer" EXECUTABLE fibonacci_action_server)
  install(TARGETS
    action_server
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin)

이제 패키지를 컴파일할 수 있습니다. 최상위 ``ros2_ws`` 로 이동하고 다음 명령을 실행하십시오.

.. code-block:: bash

  colcon build

이렇게 하면 ``action_tutorials_cpp`` 패키지에 포함된 ``fibonacci_action_server`` 를 포함한 워크스페이스 전체가 컴파일됩니다.

2.3 액션 서버 실행
~~~~~~~~~~~~~~~~~~~~

이제 액션 서버를 빌드했으므로 실행할 수 있습니다.
방금 빌드한 워크스페이스 (``ros2_ws``)를 소스로 설정하고 액션 서버를 실행하려고 합니다.

.. code-block:: bash

  ros2 run action_tutorials_cpp fibonacci_action_server

3 액션 클라이언트 작성
^^^^^^^^^^^^^^^^^^^^^^^^^^

3.1 액션 클라이언트 코드 작성
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``action_tutorials_cpp/src/fibonacci_action_client.cpp`` 파일을 열고 다음 코드를 추가하십시오.

.. literalinclude:: scripts/client.cpp
    :language: c++


첫 몇 줄은 컴파일에 필요한 모든 헤더를 포함합니다.

다음으로 ``rclcpp::Node`` 의 파생 클래스를 만듭니다.

.. literalinclude:: scripts/client.cpp
    :language: c++
    :lines: 15

``FibonacciActionClient`` 클래스의 생성자는 노드 이름을 ``fibonacci_action_client`` 로 초기화합니다.

.. literalinclude:: scripts/client.cpp
    :language: c++
    :lines: 20-22

생성자는 또한 새 액션 클라이언트를 인스턴스화합니다.

.. literalinclude:: scripts/client.cpp
    :language: c++
    :lines: 24-26

액션 클라이언트에는 다음 3 가지가 필요합니다.

1. 템플릿화된 액션 타입 이름: ``Fibonacci``.
2. 액션 클라이언트를 추가할 ROS 2 노드: ``this``.
3. 액션 이름: ``'fibonacci'``.

또한 ``send_goal`` 로의 유일한 호출을 시작할 ROS 타이머를 인스턴스화합니다.

.. literalinclude:: scripts/client.cpp
    :language: c++
    :lines: 27-30

타이머가 만료되면 ``send_goal`` 을 호출합니다.

.. literalinclude:: scripts/client.cpp
    :language: c++
    :lines: 32-57

이 함수는 다음과 같은 작업을 수행합니다.

1. 타이머를 취소합니다 (한 번만 호출되도록 함).
2. 액션 서버가 나타날 때까지 기다립니다.
3. 새 ``Fibonacci::Goal`` 을 인스턴스화합니다.
4. 응답, 피드백 및 결과 콜백을 설정합니다.
5. 목표를 서버에 보냅니다.

서버가 목표를 받고 수락하면 응답이 클라이언트에게 전송됩니다.
이 응답은 ``goal_response_callback`` 에서 처리됩니다.

.. literalinclude:: scripts/client.cpp
    :language: c++
    :lines: 62-71

서버가 목표를 수락한 경우 피드백을 클라이언트로 보낼 것이며 ``feedback_callback`` 에서 처리됩니다.

.. literalinclude:: scripts/client.cpp
    :language: c++
    :lines: 72-83

서버가 처리를 완료하면 결과를 클라이언트로 반환합니다.
결과는 ``result_callback`` 에서 처리됩니다.

.. literalinclude:: scripts/client.cpp
    :language: c++
    :lines: 84-107

이제 완전한 기능을 갖춘 액션 클라이언트가 있습니다. 이제 빌드하고 실행합시다.

3.2 액션 클라이언트 컴파일
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

이전 섹션에서 액션 클라이언트 코드를 준비했습니다.
이 코드를 컴파일하고 실행하려면 몇 가지 추가 작업을 수행해야 합니다.

먼저 CMakeLists.txt를 설정하여 액션 클라이언트가 컴파일되도록 해야 합니다.
``action_tutorials_cpp/CMakeLists.txt`` 파일을 열고 다음을 ``find_package`` 호출 바로 다음에 추가하십시오.

.. code-block:: cmake

  add_library(action_client SHARED
    src/fibonacci_action_client.cpp)
  target_include_directories(action_client PRIVATE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>)
  target_compile_definitions(action_client
    PRIVATE "ACTION_TUTORIALS_CPP_BUILDING_DLL")
  ament_target_dependencies(action_client
    "action_tutorials_interfaces"
    "rclcpp"
    "rclcpp_action"
    "rclcpp_components")
  rclcpp_components_register_node(action_client PLUGIN "action_tutorials_cpp::FibonacciActionClient" EXECUTABLE fibonacci_action_client)
  install(TARGETS
    action_client
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin)

이제 패키지를 컴파일할 수 있습니다. 최상위 ``ros2_ws`` 로 이동하고 다음 명령을 실행하십시오.

.. code-block:: bash

  colcon build

이렇게 하면 ``action_tutorials_cpp`` 패키지에 포함된 ``fibonacci_action_client`` 를 포함한 워크스페이스 전체가 컴파일됩니다.

3.3 액션 클라이언트 실행
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

이제 액션 클라이언트를 빌드했으므로 실행할 수 있습니다.
먼저 별도의 터미널에서 액션 서버가 실행 중인지 확인하십시오.
그런 다음 방금 빌드한 워크스페이스 (``ros2_ws``)를 소스로 설정하고 액션 클라이언트를 실행하십시오.

.. code-block:: bash

  ros2 run action_tutorials_cpp fibonacci_action_client

목표가 수락되고, 피드백이 출력되며 최종 결과를 확인할 수 있는 로그 메시지가 표시됩니다.

요약
-------

이 튜토리얼에서는 C++로 액션 서버 및 액션 클라이언트를 작성하고 목표, 피드백 및 결과를 교환하도록 구성했습니다.

관련 컨텐츠
----------------

* C++로 액션 서버 및 클라이언트를 작성하는 다양한 방법이 있습니다. `ros2/examples <https://github.com/ros2/examples/tree/humble/rclcpp>`_ 리포지토리의 ``minimal_action_server`` 및 ``minimal_action_client`` 패키지를 확인하십시오.

* ROS 2 액션에 대한 자세한 정보는 `ROS 2 공식 문서 <https://docs.ros.org/en/foxy/Tutorials/Actions/Creating-Action-Servers-Clients.html>`_ 를 참조하십시오.
